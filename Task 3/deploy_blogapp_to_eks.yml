name: Deploy BlogApp to EKS

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: your_dockerhub_username/blogapp
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG

  deploy_to_eks:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install Kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up Kubeconfig
        run: aws eks --region us-west-2 update-kubeconfig --name blogapp-cluster

      - name: Update Kubernetes configuration
        run: |
          sed -i "s|image: .*|image: $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG|" k8s/deployment.yaml

      - name: Deploy to EKS
        run: kubectl apply -f k8s/


##### Build and Push: The workflow first builds the Docker image of the BlogApp, tags it with the current commit SHA, and pushes it to Docker Hub.
##### Configure and Deploy: It then configures AWS credentials, sets up kubectl for the EKS cluster,
##### updates the Kubernetes configurations to use the newly pushed Docker image, and finally deploys the updated configuration to EKS
